/*
 * ServiceExtADCComponent.c
 *
 *  Created on: Feb 21, 2018
 *	   Project: ServiceExtADC
 *      Author: Bartosz Cieslicki
 *      E-Mail: bartc78@gmail.com
 *         Tel: +48 505 148 375
 */

/**
 * External ADCs on IoT 
 */
 //------------------------------------------------------------------------------------------
BITMASK IOT_ADC
{
    IOT_ADC1,     ///< sensor no. 1 
    IOT_ADC2,     ///< sensor no. 2 
    IOT_ADC3,	  ///< sensor no. 3 
    IOT_ADC4      ///< sensor no. 4 
};

/**
 * ENUM Edges
 */
 //------------------------------------------------------------------------------------------
ENUM Edges
{
	NORMAL,		///< When value back to normal
	TOOLOW,		///< When value is too low
	TOOHIGH		///< When value is too high
};

/**
 * ENUM corresponds with hardware switches on IoT. 
 */
 //------------------------------------------------------------------------------------------
ENUM Pins
{
	PIN00,		///< when both ways are down - address 0x68 is set up.
	PIN01,		///< when first is down, second is up - address 0x6C is set up.
	PIN10,		///< when first is up, second is down - address 0x6A is set up.
	PIN11		///< when both ways are up - address 0x6E is set up.
};

/**
 * ENUM corresponds with hardware pins on IoT. 
 */
 //------------------------------------------------------------------------------------------
ENUM InterfaceType
{
	MA_020,		///< Interface 0-20mA
	MA_420,		///< Interface 4-20mA
	V			///< Interface 0-10V
};

/**
 * ENUM conversion speeds. 
 */
 //------------------------------------------------------------------------------------------
ENUM ConversionSpeed
{
	LOWPRECISION240SPS,		///< Quick conversion with low precision 240 SPS (12 bits)
	HIGHPRECISION15SPS,		///< Slow conversion with high precision 15 SPS (16 bits)
};

/**
 ** Set device address. Device address has to be the same in the program and on IoT.
 ** Hardware switch allows to setup address on IoT. Hardware combination must be passed to the program through the function.
 * 
 * Returns:
 * LE_OK if Successful.
 * LE_BAD_PARAMETER if bad parameter
 */
//------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDeviceAddress
(
	Pins Pin    ///< enum le_ExtAdc_Pins_t
);

/**
 * Set conversion speed.
 * 
 * Returns:
 * LE_OK if Successful.
 * LE_BAD_PARAMETER if bad parameter
 */
//------------------------------------------------------------------------------------------
FUNCTION le_result_t SetConversionSpeed
(
	ConversionSpeed Speed    ///< enum le_ExtAdc_ConvertionSpeed_t
);

/**
 * Set file descriptor. 
 * 
 * Returns:
 * LE_OK if Successful.
 * LE_BAD_PARAMETER if bad parameter
 */
//------------------------------------------------------------------------------------------
FUNCTION le_result_t SetFileDescriptor
(
	string Name[200] IN   ///< File descriptor. Example "/dev/i2c-0"
);

/**
 * Get the values of an ADC input from specific sensor.
 * 
 * Returns:
 * LE_OK if Successful.
 * LE_OVERFLOW if raw value is too high
 * LE_UNDERFLOW if raw value is too low
 * LE_BAD_PARAMETER if bad parameter
 */
//------------------------------------------------------------------------------------------
FUNCTION le_result_t GetValue
(
	IOT_ADC Sensor IN,  			///< Sensor to read
	uint16 RawData OUT,				///< Raw data 15bit
    double Percentage OUT,			///< Reading in percent
    double ConvertedValue OUT		///< Returns converted value - see SetConverter(double Min, double Max)
);

/**
 * Function setup interval (in millisecond). 
 * 
 * Set the time interval which elapses between two reading/checking, provided by events.
 * 
 * Returns:
 * LE_OK if Successful.
 */
//------------------------------------------------------------------------------------------
FUNCTION le_result_t SetInterval
(
	uint32 Interval				///< In milliseconds
);

/**
 * Function setup Min and Max achievable by connected unit. 
 * 
 * Convertible value will be calculated based on the real device Min and Max
 * Returns:
 * LE_OK if Successful.
 * LE_BAD_PARAMETER if bad parameter
 */
 //------------------------------------------------------------------------------------------
FUNCTION le_result_t SetConverter
(
	IOT_ADC Sensor, 
	double Min,           ///< Device Min value
	double Max			  ///< Device Max value
);

/**
 * Function setup interface on specific sensor. 
 * 
 * Available interfaces: 4-20mA and 0-10V
 */
 //------------------------------------------------------------------------------------------
FUNCTION SetInterface
(
	IOT_ADC Sensor, 
	InterfaceType Interface           ///< Sensor Interface
);

/**
 * Function setup edges and Hysteresis. Event OnAlert will be fired, based on these parameters.
 *  
 * Returns:
 * LE_OK if Successful.
 * LE_BAD_PARAMETER if bad parameter
 */
 //------------------------------------------------------------------------------------------
FUNCTION le_result_t SetEdges
(
	IOT_ADC Sensor, 			///< Sensor
	double TooLow, 				///< Cannot be higher by TooLow parameter.
	double TooHigh, 			///< Cannot be lower by TooLow parameter.
	double Hysteresis			///< Hysteresis
);

/**
 * Function locks I2C communication in the component. 
 * Should be used to avoid conflict with other I2C call
 * 
 */
 //------------------------------------------------------------------------------------------
FUNCTION MutexLock
(

);

/**
 * Function unlocks I2C communication in the component. 
 * 
 * 
 */
 //------------------------------------------------------------------------------------------
FUNCTION MutexUnlock
(

);

/**
 * Add handler function for EVENT 'le_ExtAdc_AddOnValueHandler'
 * 
 * This event provides reading from specific sensor.
 * Reading will be returned every x number of milliseconds (Default 10000) 
 * Default value can be changed by SetInterval(uint32 Interval)
 */
//------------------------------------------------------------------------------------------
HANDLER HandlerRef
(
	IOT_ADC Sensor,  			///< Sensor
	uint16 RawData,				///< Raw data 15bit
    double Percentage,			///< Reading in percent
    double ConvertedValue		///< Returns converted value - see SetConverter(IOT_ADC Sensor, double Min, double Max)
);

EVENT OnValue
(
    uint8 Sensor,   			///< Sensor to read can be combined. For example LE_EXTADC_IOT_ADC1|LE_EXTADC_IOT_ADC2
    HandlerRef handler
);

/**
 * Add handler function for EVENT 'le_ExtAdc_AddOnAlertHandler'
 * 
 * This event fires when value is too low, too high or back to normal
 * Edges are set by function SetEdges(IOT_ADC Sensor, double TooLow, double TooHigh, double Hysteresis)
 */
//------------------------------------------------------------------------------------------
HANDLER AlertHandlerRef
(
	IOT_ADC Sensor,  			///< Sensor
	Edges Edge,					///< Notify if value is too low, too high or back to normal - see SetEdges(IOT_ADC Sensor, double TooLow, double TooHigh, double Hysteresis)
	uint16 RawData,				///< Raw data 15bit
    double Percentage,			///< Reading in percent
    double ConvertedValue		///< Returns converted value - see SetConverter(IOT_ADC Sensor, double Min, double Max)
);

EVENT OnAlert
(
    uint8 Sensor,   			///< Sensor to read can be combined. For example LE_EXTADC_IOT_ADC1|LE_EXTADC_IOT_ADC2
    AlertHandlerRef handler
);